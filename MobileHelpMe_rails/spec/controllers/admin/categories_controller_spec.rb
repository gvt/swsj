require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::CategoriesController do

  def mock_admin_category(stubs={})
    @mock_admin_category ||= mock_model(Admin::Category, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all admin_categories as @admin_categories" do
      Admin::Category.stub(:all) { [mock_admin_category] }
      get :index
      assigns(:admin_categories).should eq([mock_admin_category])
    end
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      Admin::Category.stub(:find).with("37") { mock_admin_category }
      get :show, :id => "37"
      assigns(:admin_category).should be(mock_admin_category)
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      Admin::Category.stub(:new) { mock_admin_category }
      get :new
      assigns(:admin_category).should be(mock_admin_category)
    end
  end

  describe "GET edit" do
    it "assigns the requested category as @category" do
      Admin::Category.stub(:find).with("37") { mock_admin_category }
      get :edit, :id => "37"
      assigns(:admin_category).should be(mock_admin_category)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created category as @category" do
        Admin::Category.stub(:new).with({'these' => 'params'}) { mock_admin_category(:save => true) }
        post :create, :admin_category => {'these' => 'params'}
        assigns(:admin_category).should be(mock_admin_category)
      end

      it "redirects to the created category" do
        Admin::Category.stub(:new) { mock_admin_category(:save => true) }
        post :create, :category => {}
        response.should redirect_to(admin_category_url(mock_admin_category))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        Admin::Category.stub(:new).with({'these' => 'params'}) { mock_admin_category(:save => false) }
        post :create, :admin_category => {'these' => 'params'}
        assigns(:admin_category).should be(mock_admin_category)
      end

      it "re-renders the 'new' template" do
        Admin::Category.stub(:new) { mock_admin_category(:save => false) }
        post :create, :admin_category => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested category" do
        Admin::Category.stub(:find).with("37") { mock_admin_category }
        mock_admin_category.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :admin_category => {'these' => 'params'}
      end

      it "assigns the requested category as @category" do
        Admin::Category.stub(:find) { mock_admin_category(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:admin_category).should be(mock_admin_category)
      end

      it "redirects to the category" do
        Admin::Category.stub(:find) { mock_admin_category(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(admin_category_url(mock_admin_category))
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        Admin::Category.stub(:find) { mock_admin_category(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:admin_category).should be(mock_admin_category)
      end

      it "re-renders the 'edit' template" do
        Admin::Category.stub(:find) { mock_admin_category(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      Admin::Category.stub(:find).with("37") { mock_admin_category }
      mock_admin_category.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the admin_categories list" do
      Admin::Category.stub(:find) { mock_admin_category }
      delete :destroy, :id => "1"
      response.should redirect_to(admin_categories_url)
    end
  end

end
